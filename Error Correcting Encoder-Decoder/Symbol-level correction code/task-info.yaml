type: edu
custom_name: stage2
files:
- name: src/correcter/Main.java
  visible: true
  text: |
    package correcter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("Some text to test"),
                new TestClue("send message to user with id #42354"),
                new TestClue("thq")
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            List<String> splitReply = Arrays.asList(reply.strip().split("\\n"));

            if (splitReply.size() != 4) {
                return new CheckResult(false,
                    "Your program should output 4 lines, found: " + splitReply.size());
            }

            String initialLine = splitReply.get(0);
            String stretched = splitReply.get(1);
            String received = splitReply.get(2);
            String decoded = splitReply.get(3);


            if (!initialLine.equals(clue.input)) {
                return new CheckResult(false,
                    "First line of output should be an input reference!");
            }

            if (!stretched.equals(stretchString(initialLine))) {
                return new CheckResult(false,
                    "Text before sending is encoded incorrectly!");
            }

            if (!decoded.equals(initialLine)) {
                return new CheckResult(false,
                    "Decoding result not match required! Make sure the program works correctly!");
            }

            return checkMatches(received, stretched);
        }

        private static String stretchString(String target) {
            char[] resultChars = target.toCharArray();
            char[] result = new char[resultChars.length * 3];
            for (int i = 0; i < result.length; i++) {
                result[i] = resultChars[i / 3];
            }

            return new String(result);
        }

        private CheckResult checkMatches(String userOutput,
                                         String correctOutput) {

            if (userOutput.length() != correctOutput.length()) {
                return new CheckResult(false,
                    "Input length and output length should be the same!\n" +
                        "Input length: " + correctOutput.length() +
                        "Output length: " + userOutput.length());
            }

            for (int i = 0; i < userOutput.length(); i+=3) {

                int from = i;
                int to = Math.min(i+3, userOutput.length());

                String currUserPart = userOutput.substring(from, to);
                String currCorrectPart = correctOutput.substring(from, to);

                if (currUserPart.length() != 3) {
                    break;
                }

                int errors = 0;

                for (int j = 0; j < currUserPart.length(); j++) {
                    if (currUserPart.charAt(j) != currCorrectPart.charAt(j)) {
                        errors++;
                    }
                }

                if (errors != 1) {
                    return new CheckResult(false,
                        "One of the triples contain "
                            + errors + " errors, but every triple should always contain 1 error");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/correcter/StringProcessor.java
  visible: true
  text: |+
    package correcter;

    import java.util.Arrays;

    import static correcter.Main.ERROR_INTERVAL;

    public class StringProcessor {


        //creates an array of substrings which will later be processed individually
        private String[] stringBreaker(String input) {

            //calculation of how many sequences will be processed, round up;
            int brokenInputLength = (int) Math.ceil((((double) input.length()) / ((double) ERROR_INTERVAL)));
            String[] brokenInput = new String[brokenInputLength];

            int indexLastBreak = 0;

            //adding each sequence to a separate string, apart from the last piece of input
            if (brokenInputLength > 1) {
                for (int index = 0; index < brokenInputLength - 1; index++) {
                    brokenInput[index] = input.substring(ERROR_INTERVAL * index, ERROR_INTERVAL * index + ERROR_INTERVAL);

                    //keeps track of the index of the last sequence
                    indexLastBreak = ERROR_INTERVAL * index + ERROR_INTERVAL - 1;
                }


                //addition of the last substring, avoiding IndexOutOfBounds errors
                if (brokenInputLength > 3) {
                    brokenInput[brokenInputLength - 1] = input.substring(indexLastBreak + 1);
                }
            } else {
                //case if input is the same length as the interval
                brokenInput[0] = input;
            }

            return brokenInput;
        }

        //changes a single random char from the sequence to other random char, as long as sequence is within chosen interval
        private String errorCauser(String sequence) {

            char[] errorSequence = sequence.toCharArray();
            if (errorSequence.length == ERROR_INTERVAL) {
                char randomChar = Randomizer.charPick();
                int randomIndex = Randomizer.indexPick();
                //certifies that the chosen random char will not be the same as the original one
                while (errorSequence[randomIndex] == randomChar) {
                    randomChar = Randomizer.charPick();
                }
                errorSequence[randomIndex] = randomChar;
            }

            //Builds the String from the array
            StringBuilder errorSequenceOutput = new StringBuilder();

            for (char letter : errorSequence) {
                errorSequenceOutput.append(letter);
            }
            return errorSequenceOutput.toString();
        }

        //Takes a given string and return a string with a single error per defined interval
        public String errorInput(String input) {
            String[] brokenInput = stringBreaker(input);
            StringBuilder errorOutput = new StringBuilder();
            for (String sequence : brokenInput) {
                sequence = errorCauser(sequence);
                errorOutput.append(sequence);
            }
            return errorOutput.toString();
        }
    }

  learner_created: true
- name: src/correcter/Randomizer.java
  visible: true
  text: |
    package correcter;

    import java.util.Random;

    import static correcter.Main.ERROR_INTERVAL;

    public class Randomizer {

        //picks which char will be changed within a sequence
        public static int indexPick() {
            Random random = new Random();
            return random.nextInt(ERROR_INTERVAL);
        }

        //picks a random char, between any upper and lower case letters, digits, and space
        public static char charPick() {

            //smallest and largest Ascii code within chosen possible characters
            int charCode_Space = 32;
            int charCode_z = 122;

            //possible characters
            String regex = "[a-zA-Z0-9 ]";

            Random random = new Random();
            Character pickedChar = '.';
            //certifies that the randomly picked char matches possible characters
            while (!pickedChar.toString().matches(regex)) {
                pickedChar = (char) (random.nextInt(charCode_z - charCode_Space + 1) + charCode_Space);
            }
            return pickedChar;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/58/stages/313/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/58/stages/313/implement">JetBrains
    Academy</a>
  time: Thu, 18 Mar 2021 18:33:34 UTC
record: 2
