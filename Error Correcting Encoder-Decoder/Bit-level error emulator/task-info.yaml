type: edu
custom_name: stage3
files:
- name: src/correcter/Main.java
  visible: true
  text: |
    package correcter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.*;
    import java.util.List;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        public static File received = null;

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue firstTestClue = new TestClue("Eat more of these french buns!");
            TestClue secondTestClue = new TestClue("$ome rand0m messAge");
            TestClue thirdTestClue = new TestClue("better call Saul 555-00-73!");
            TestClue sixthTestClue = new TestClue("5548172 6548 225147 23656595 5155");

            return List.of(
                new TestCase<TestClue>()
                    .setAttach(firstTestClue)
                    .addFile("send.txt", firstTestClue.input),

                new TestCase<TestClue>()
                    .setAttach(secondTestClue)
                    .addFile("send.txt", secondTestClue.input),

                new TestCase<TestClue>()
                    .setAttach(thirdTestClue)
                    .addFile("send.txt", thirdTestClue.input),

                new TestCase<TestClue>()
                    .setAttach(sixthTestClue)
                    .addFile("send.txt", sixthTestClue.input)
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String path = System.getProperty("user.dir");
            searchFile("received.txt");

            if (received == null) {
                return new CheckResult(false,
                    "Can't find received.txt file. " +
                        "Make sure your program writes it down or " +
                        "make sure the name of the file is correct.");
            }

            byte[] receivedContent;

            FileInputStream stream;
            try {
                stream = new FileInputStream(received);
            } catch (FileNotFoundException e) {
                return new CheckResult(false,
                    "Can't find received.txt file. " +
                        "Make sure your program writes it down " +
                        "or make sure the name of the file is correct.");
            }

            try {
                receivedContent = stream.readAllBytes();
            } catch (IOException e) {
                throw new RuntimeException("Can't read the file");
            }

            String correctBinary = toBinary(clue.input.getBytes());
            String outputBinary = toBinary(receivedContent);

            return checkMatches(outputBinary, correctBinary);
        }

        private static String toBinary(byte[] bytes) {
            StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
            for (int i = 0; i < Byte.SIZE * bytes.length; i++) {
                sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
            }
            return sb.toString();
        }

        private static byte[] fromBinary(String s) {
            int sLen = s.length();
            byte[] toReturn = new byte[(sLen + Byte.SIZE - 1) / Byte.SIZE];
            char c;
            for (int i = 0; i < sLen; i++)
                if ((c = s.charAt(i)) == '1')
                    toReturn[i / Byte.SIZE] = (byte) (toReturn[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                else if (c != '0')
                    throw new IllegalArgumentException();
            return toReturn;
        }

        private CheckResult checkMatches(String output, String correct) {
            if (output.isEmpty() && correct.isEmpty()) return CheckResult.correct();

            if (output.length() != correct.length()) {
                return new CheckResult(false,
                    "The program was expected to output " +
                        correct.length() / 8 +
                        " bytes, but output " +
                        output.length() / 8);
            }

            for (int i = 0; i < output.length(); i += 8) {
                String currOutputByte = output.substring(i, i+8);
                String currCorrectByte = correct.substring(i, i+8);

                int difference = 0;
                for (int j = 0; j < currCorrectByte.length(); j++) {
                    char currOutputBit = currOutputByte.charAt(j);
                    char currCorrectBit = currCorrectByte.charAt(j);

                    if (currCorrectBit != currOutputBit) {
                        difference++;
                    }
                }

                if (difference == 0) {
                    return new CheckResult(false,
                        "One of bytes from the input stayed the same but should be changed");
                }

                if (difference != 1) {
                    return new CheckResult(false,
                        "One of bytes from the input was changes in more than one bit");
                }
            }

            return CheckResult.correct();
        }

        public static void searchFile(String fileName) {
            File file = new File(fileName);
            if (file.exists()) {
                received = file;
            }
        }
    }
  learner_created: false
- name: src/correcter/StringProcessor.java
  visible: true
  text: |+
    package correcter;

    import java.util.Arrays;

    import static correcter.Main.ERROR_INTERVAL;

    public class StringProcessor {


        //creates an array of substrings which will later be processed individually
        private String[] stringBreaker(String input) {

            //calculation of how many sequences will be processed, round up;
            int brokenInputLength = (int) Math.ceil((((double) input.length()) / ((double) ERROR_INTERVAL)));
            String[] brokenInput = new String[brokenInputLength];

            int indexLastBreak = 0;

            //adding each sequence to a separate string, apart from the last sequence of input
            if (brokenInputLength > 1) {
                for (int index = 0; index < brokenInputLength - 1; index++) {
                    brokenInput[index] = input.substring(ERROR_INTERVAL * index, ERROR_INTERVAL * index + ERROR_INTERVAL);

                    //keeps track of the index of the last sequence
                    indexLastBreak = ERROR_INTERVAL * index + ERROR_INTERVAL - 1;
                }


                //addition of the last substring, avoiding IndexOutOfBounds errors
                if (brokenInputLength >= ERROR_INTERVAL) {
                    brokenInput[brokenInputLength - 1] = input.substring(indexLastBreak + 1);
                }
            } else {
                //case if input is the same length as the interval
                brokenInput[0] = input;
            }

            return brokenInput;
        }

        //changes a single random char from the sequence to other random char, as long as sequence is within chosen interval
        private String errorCauser(String sequence) {

            char[] errorSequence = sequence.toCharArray();
            if (errorSequence.length == ERROR_INTERVAL) {
                char randomChar = Randomizer.charPick();
                int randomIndex = Randomizer.indexPick();
                //certifies that the chosen random char will not be the same as the original one
                while (errorSequence[randomIndex] == randomChar) {
                    randomChar = Randomizer.charPick();
                }
                errorSequence[randomIndex] = randomChar;
            }

            //Builds the String from the array
            StringBuilder errorSequenceOutput = new StringBuilder();

            for (char letter : errorSequence) {
                errorSequenceOutput.append(letter);
            }
            return errorSequenceOutput.toString();
        }

        //Takes a given string and return a string with a single error per defined interval
        public String errorInput(String multiplicatedString) {
            String[] brokenInput = stringBreaker(multiplicatedString);
            StringBuilder errorOutput = new StringBuilder();
            for (String sequence : brokenInput) {
                sequence = errorCauser(sequence);
                errorOutput.append(sequence);
            }
            return errorOutput.toString();
        }

        //repeats each letter "interval" times
        public String multiplicatedString(String input) {
            StringBuilder multiplicatedString = new StringBuilder();
            char[] inputArray = input.toCharArray();
            for (char letter : inputArray) {
                for (int sumLetters = 0; sumLetters < ERROR_INTERVAL; sumLetters++) {
                    multiplicatedString.append(letter);
                }
            }
            return multiplicatedString.toString();
        }



        private char findCorrectLetter(String errorSequence) {
            char firstLetter = errorSequence.charAt(0);
            char secondLetter = errorSequence.charAt(1);
            char thirdLetter = errorSequence.charAt(2);

            if (firstLetter == secondLetter || firstLetter == thirdLetter) {
                return firstLetter;
            } else {
                return secondLetter;

            }
        }


        public String cleanInput(String errorSimulatedString) {
            StringBuilder cleanString = new StringBuilder();
            String[] errorSequences = stringBreaker(errorSimulatedString);
            for (String sequence : errorSequences) {
                char correctLetter = findCorrectLetter(sequence);
                cleanString.append(correctLetter);
            }
            return cleanString.toString();
        }
    }

  learner_created: true
- name: src/correcter/Randomizer.java
  visible: true
  text: |
    package correcter;

    import java.util.Random;

    import static correcter.Main.ERROR_INTERVAL;

    public class Randomizer {

        //picks which char will be changed within a sequence
        public static int indexPick() {
            Random random = new Random();
            return random.nextInt(ERROR_INTERVAL);
        }

        //picks a random char, between any upper and lower case letters, digits, and space
        public static char charPick() {

            //smallest and largest Ascii code within chosen possible characters
            int charCode_Space = 32;
            int charCode_z = 122;

            //possible characters
            String regex = "[a-zA-Z0-9 ]";

            Random random = new Random();
            Character pickedChar = '.';
            //certifies that the randomly picked char matches possible characters
            while (!pickedChar.toString().matches(regex)) {
                pickedChar = (char) (random.nextInt(charCode_z - charCode_Space + 1) + charCode_Space);
            }
            return pickedChar;
        }
    }
  learner_created: true
- name: src/correcter/FileProcessing.java
  visible: true
  learner_created: true
- name: received.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/58/stages/314/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/58/stages/314/implement">JetBrains
    Academy</a>
  time: Fri, 19 Mar 2021 00:10:33 UTC
record: 3
